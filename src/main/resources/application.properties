spring.jpa.database=POSTGRESQL
spring.datasource.platform=postgres
spring.jpa.properties.hibernate.hbm2ddl.import_files_sql_extractor=org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
spring.jpa.hibernate.hbm2ddl.import_files_sql_extractor=org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
spring.jpa.hibernate.ddl-auto=none
#spring.jpa.auto_evict_collection_cache=false
spring.http.gzip.enabled=true

#spring.jpa.properties.hibernate.format_sql=true

spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.batch_versioned_data=true

spring.flyway.enabled=true
spring.flyway.table =schema_version

server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain

spring.jpa.hibernate.id.new_generator_mappings=true
spring.jpa.hibernate.use-new-id-generator-mappings=true
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.cache.use_query_cache=false
spring.jpa.properties.hibernate.cache.use_minimal_puts=false
spring.jpa.properties.hibernate.cache.region.factory_class=org.rutebanken.tiamat.hazelcast.TiamatHazelcastCacheRegionFactory

netex.import.enabled.types=MERGE,INITIAL,ID_MATCH,MATCH

hazelcast.performance.monitoring.enabled=true
hazelcast.performance.monitoring.delay.seconds=2

management.endpoints.web.exposure.include=info,env,metrics
management.endpoints.prometheus.enabled=true
management.metrics.endpoint.export.prometheus.enabled=true

spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.default_batch_fetch_size=16
spring.jpa.properties.hibernate.generate_statistics=false

changelog.publish.enabled=false

#spring.activemq.broker-url=tcp://localhost:61616?jms.redeliveryPolicy.maximumRedeliveries=0

# server.jetty.acceptors=30

jettyMaxThreads=10
jettyMinThreads=1

spring.datasource.hikari.maximumPoolSize=40
spring.datasource.hikari.leakDetectionThreshold=30000
logging.level.com.zaxxer.hikari=OFF
logging.level.org.rutebanken.tiamat=DEBUG
#logging.level.org.hibernate.type=TRACE
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

logging.level.org.hibernate.stat=OFF
logging.level.org.hibernate.SQL=OFF
spring.jpa.show-sql=false

logging.level.org.rutebanken.tiamat.diff.generic.GenericObjectDiffer=OFF
logging.level.org.rutebanken.tiamat.netex.mapping=WARN
logging.level.org.rutebanken.tiamat.repository=WARN
logging.level.org.rutebanken.tiamat.exporter.async.ParentTreeTopographicPlaceFetchingIterator=DEBUG
logging.level.org.rutebanken.tiamat.model.GroupOfStopPlaces=WARN

tiamat.locals.language.default=eng

tariffZoneLookupService.resetReferences=true
stopPlaceRefUpdaterService.enableLegacyUpdater=true

debug=true

# Disable feature detection by this undocumented parameter. Check the org.hibernate.engine.jdbc.internal.JdbcServiceImpl.configure method for more details.
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false

# Because detection is disabled you have to set correct dialect by hand.
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect

tariffzoneLookupService.resetReferences=true

spring.jpa.properties.hibernate.dialect=org.hibernate.spatial.dialect.postgis.PostgisDialect

spring.database.driverClassName=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5432/tiamat
spring.datasource.username=tiamat
spring.datasource.password=tiamat

aspect.enabled=true

netex.id.valid.prefix.list={TopographicPlace:{'KVE','WOF','OSM','ENT','LAN'},TariffZone:{'*'},FareZone:{'*'},GroupOfTariffZones:{'*'}}

server.port=1888

blobstore.gcs.blob.path=exports
blobstore.gcs.bucket.name=tiamat-test
blobstore.gcs.credential.path=gcloud-storage.json
blobstore.gcs.project.id=carbon-1287

security.basic.enabled=false
management.security.enabled=false
authorization.enabled = true
rutebanken.kubernetes.enabled=false

#OAuth2 Resource Server
#spring.security.oauth2.resourceserver.jwt.issuer-uri=http://notinuse
#tiamat.oauth2.resourceserver.auth0.ror.jwt.audience=notinuse
#tiamat.oauth2.resourceserver.auth0.ror.claim.namespace=notinuse

#OAuth2 Resource Server
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://ror-entur-dev.eu.auth0.com/
tiamat.oauth2.resourceserver.auth0.ror.jwt.audience=https://ror.api.dev.entur.io
tiamat.oauth2.resourceserver.auth0.ror.claim.namespace=https://ror.entur.io/

async.export.path=/tmp

logging.level.org.rutebanken.tiamat.service.TopographicPlaceLookupService=OFF
logging.level.org.rutebanken.tiamat.rest.graphql.fetchers.TopographicPlaceFetcher=DEBUG
logging.level.org.rutebanken.tiamat.netex.id.GaplessIdGeneratorService=TRACE
logging.level.org.rutebanken.tiamat.service.TariffZonesLookupService=OFF
logging.level.org.rutebanken.tiamat.exporter.async.ParentStopFetchingIterator=OFF
logging.level.org.rutebanken.tiamat.service.batch.PerSecondLogger=INFO
logging.level.org.rutebanken.tiamat.repository.iterator.ScrollableResultIterator=OFF
logging.level.org.rutebanken.tiamat.service.batch.StopPlaceRefUpdater=OFF

#logging.level.org.springframework.orm.jpa=DEBUG
#logging.level.org.springframework.transaction=DEBUG

#logging.level.org.springframework.security=OFF

publicationDeliveryUnmarshaller.validateAgainstSchema=false
publicationDeliveryStreamingOutput.validateAgainstSchema=false
netex.validPrefix=NSR
netex.profile.version=1.12:NO-NeTEx-stops:1.4
blobstore.local.folder=/Users/mansoor.sajjad/local-gcs-storage/tiamat/export
spring.profiles.active=local-blobstore,activemq

spring.cloud.gcp.project-id=entur-rtd